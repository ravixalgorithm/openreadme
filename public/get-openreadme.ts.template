  try {
    if (typeof apiUrl !== "string" || !apiUrl.startsWith("http")) {
      throw new Error("Invalid apiUrl injected into get-openreadme.ts")
    }

    const res = await fetch(apiUrl, { method: "GET", cache: "no-store" })
    if (!res.ok) {
      throw new Error(`API request failed: ${res.status} ${res.statusText}`)
    }

    // Expect JSON like { ok: true, url: "https://..." }
    const data: any = await res.json().catch(() => ({}))
    if (data?.error) {
      throw new Error(`API error: ${data.error}`)
    }
    console.log("OpenReadme refresh triggered:", data?.url ?? "(no url)")

    // If an image URL is provided, download and overwrite the public file
    const imageUrl: string | undefined = data?.url
    if (typeof imageUrl === 'string' && imageUrl.startsWith('http')) {
      console.log(`Downloading image to ${outPath} ...`)
      await download(imageUrl, outPath)
      console.log('Image updated.')
    } else {
      console.log('No image URL returned; nothing to download.')
    }
  } catch (err) {
    console.error("[OpenReadme] Refresh failed:", err)
    process.exit(1)
  }
}

main()
