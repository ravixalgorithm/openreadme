/*
  This file is a template. We will prepend a runtime-generated
  const apiUrl = "..." line before serving it to the user.
*/

import https from 'node:https'
import fs from 'node:fs'

const outPath = 'openreadme.png'

function download(url: string, dest: string): Promise<void> {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest)
    https.get(url, (response) => {
      if (response.statusCode && response.statusCode >= 400) {
        return reject(new Error(`Failed: ${response.statusCode}`))
      }
      response.pipe(file)
      file.on('finish', () => file.close(() => resolve()))
    }).on('error', (err) => {
      fs.unlink(dest, () => reject(err))
    })
  })
}

// UI injects: const apiUrl = "https://your-domain/api/openreadme?...";
// Do not change the injected apiUrl line.

async function main() {
  try {
    if (typeof apiUrl !== "string" || !apiUrl.startsWith("http")) {
      throw new Error("Invalid apiUrl injected into get-openreadme.ts")
    }

    const res = await fetch(apiUrl, { method: "GET", cache: "no-store" })
    if (!res.ok) {
      throw new Error(`API request failed: ${res.status} ${res.statusText}`)
    }

    // If your API returns JSON like { ok: true, url: "https://..." }
    const data = await res.json().catch(() => ({}))
    console.log("OpenReadme refresh triggered:", data?.url ?? "(no url)")

    // No commit is necessary if the served image URL stays constant for the same z id.
    // If you decide to write a local artifact, add fs writes here.
  } catch (err) {
    console.error("[OpenReadme] Refresh failed:", err)
    process.exit(1)
  }
}

main()
